#!/bin/sh

export PYTHON="python3"
export VENV="_python"
export PATH="$PWD/$VENV/bin:$PATH"
export PREFIX="./_site"

export GIT_REMOTE="origin"
export MASTER_BRANCH_REMOTE="master"
export PAGES_BRANCH_LOCAL="gh-pages"
export PAGES_BRANCH_REMOTE="gh-pages"


venv_setup() { # filename [force | silent]
    MD5_FILE="$VENV/$1.md5"

    if [ "_$2" = '_force' ] && [ -e "$MD5_FILE" ]; then
        rm "$MD5_FILE"
    fi

    if [ -e "$MD5_FILE" ] && md5sum -c "$MD5_FILE" > /dev/null 2>&1; then
        [ "_$2" != "_silent" ] && echo "Skipping virtual environment update (no changes in $1)"
        return 0
    fi

    if [ ! -d "$VENV" ]; then
        $PYTHON -m venv "$VENV" || exit 1
    fi

    $PYTHON -m pip install -U -r "$1" || exit 1

    md5sum "$1" > "$MD5_FILE"
}

new_worktree() { # prefix ref branch [force]
    if [ "_$4" = '_force' ] || [ ! -e "$1" ]; then
        [ -e "$1" ] && rm -rf "$1"
        git worktree prune
        git worktree add "$1" "$2"
    fi

    (
        cd "$1"
        git reset -q --hard "$2"
        git clean -q -d -f
        git checkout -q -B "$3"
        git branch -q --set-upstream-to="$2" "$3"
    )
}

if [ ! -d "$VENV" ] && [ "_$1" != "_venv" ]; then
    echo "Setting up the virtual environment: $VENV"
    venv_setup requirements.txt
fi

case $1 in
    venv)
        case $2 in
            update)
                venv_setup requirements.txt $3
                if [ -e "$VENV/cli-requirements.txt.md5" ]; then
                    venv_setup cli-requirements.txt $3
                fi ;;
            remove) rm -r "$VENV" ;;
            *) echo "Usage: $0 $1 update|remove" ;;
        esac ;;
    pages)
        case $2 in
            pull)
                echo "Fetching updates for $GIT_REMOTE/$PAGES_BRANCH_REMOTE"
                git fetch -q "$GIT_REMOTE" "$PAGES_BRANCH_REMOTE"

                jq -r '.repos.remotes[] | "\(.name) \(.pull) \(.push)"' data/config.json | while read name pull push; do
                    git remote add "$name" "$pull" 2>/dev/null || git remote set-url "$name" "$pull"
                    git remote set-url --push "$name" "$push"
                done

                jq -r '.repos.chats[] | "\(.remote) \(.branch)"' data/config.json | while read remote branch; do
                    echo "Fetching updates for $remote/$branch"
                    git fetch -q "$remote" "$branch"
                done

                ./bsu pages checkout ;;
            checkout)
                echo "Updating $PREFIX"
                new_worktree "$PREFIX" "$GIT_REMOTE/$PAGES_BRANCH_REMOTE" "$PAGES_BRANCH_LOCAL" "$3"

                [ ! -e "$PREFIX/chats" ] && mkdir -p "$PREFIX/chats"
                jq -r '.repos.chats | keys | "\(.[])"' data/config.json | while read year; do
                    remote=$(jq -r ".repos.chats[\"$year\"].remote" data/config.json)
                    branch=$(jq -r ".repos.chats[\"$year\"].branch" data/config.json)

                    echo "Updating $PREFIX/chats/$year"
                    new_worktree "$PREFIX/chats/$year" "$remote/$branch" "$remote-$branch" "$3"
                done ;;
            commit)
                for worktree in $PREFIX $PREFIX/chats/*; do
                (
                    cd "$worktree"
                    git add .
                    git commit -m "Jenkins: Обновление статичных файлов" || true
                )
                done ;;
            push)
                for worktree in $PREFIX $PREFIX/chats/*; do
                (
                    cd "$worktree"
                    git -c push.default=upstream push
                )
                done ;;
            *) echo "Usage: $0 $1 checkout|commit|pull|push" ;;
        esac ;;
    pull)
        if [ "$(git status --porcelain=v1 | wc -l)" -eq 0 ]; then
            echo "Updating ./"
            git pull -q --rebase "$GIT_REMOTE" "$MASTER_BRANCH_REMOTE"
        else
            echo "Not updating master due to uncommitted changes"
        fi

        ./bsu pages pull ;;
    build) $PYTHON -m templates.utils.generate ;;
    serve) $PYTHON -m templates.utils.serve ;;
    download-chats) $PYTHON -m templates.utils.chats ;;
    sh|bash) $@ ;;
    cli)
        shift
        venv_setup cli-requirements.txt silent
        $PYTHON -m templates.utils.cli $@ ;;
    repl) $PYTHON -i -m templates.utils.repl ;;
    script) shift; $PYTHON -m templates.scripts.$@ ;;
    python) shift; $PYTHON $@ ;;
    *) echo "Usage: $0 venv|pages|pull|build|serve|download-chats|sh|repl|script|python" ;;
esac
